<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gold POS - Financial Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc; /* Tailwind gray-50 */
        }
        .card {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            padding: 1.5rem;
            transition: all 0.3s ease-in-out;
        }
        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .btn-primary {
            background-color: #ca8a04; /* Tailwind yellow-600 */
            color: white;
        }
        .btn-primary:hover {
            background-color: #a16207; /* Tailwind yellow-700 */
        }
        .btn-danger {
            background-color: #dc2626; /* Tailwind red-600 */
            color: white;
        }
        .btn-danger:hover {
            background-color: #b91c1c; /* Tailwind red-700 */
        }
        input, select {
            border-radius: 0.5rem;
            border: 1px solid #e5e7eb; /* Tailwind gray-200 */
            padding: 0.5rem 0.75rem;
            width: 100%;
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        input:focus, select:focus {
            outline: none;
            border-color: #ca8a04;
            box-shadow: 0 0 0 2px rgba(202, 138, 4, 0.4);
        }
        /* Spinner for loading state */
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #ca8a04;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 5rem auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .tab-active {
            color: #ca8a04; /* yellow-600 */
            border-color: #f59e0b; /* amber-500 */
        }
    </style>
</head>
<body class="antialiased text-gray-800">

    <!-- App Container -->
    <div id="app-container" class="max-w-7xl mx-auto p-4 md:p-6 lg:p-8">

        <!-- Header -->
        <header class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-3 text-yellow-600"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                Gold POS Dashboard
            </h1>
            <p class="text-gray-500 mt-1">Track your business sales, expenses, and profitability in real-time.</p>
        </header>
        
        <!-- Loading Indicator -->
        <div id="loading-indicator" class="text-center">
            <div class="loader"></div>
            <p class="text-gray-600">Connecting to your database...</p>
        </div>

        <!-- Main Content (hidden until Firebase is ready) -->
        <main id="main-content" class="hidden">
            <!-- Default Price Setter -->
            <section id="default-price-setter" class="card mb-8">
                <h2 class="text-xl font-semibold mb-4 text-gray-800">Set Default Prices</h2>
                <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end">
                    <div>
                        <label for="default-gold-type" class="block text-sm font-medium text-gray-700">Gold Type</label>
                        <select id="default-gold-type" class="mt-1">
                            <option value="18K">18K Gold</option>
                            <option value="22K">22K Gold</option>
                            <option value="24K">24K Gold</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div>
                        <label for="default-price-per-gram" class="block text-sm font-medium text-gray-700">Default Price per Gram (₦)</label>
                        <input type="number" id="default-price-per-gram" step="0.01" class="mt-1" placeholder="Enter price">
                    </div>
                    <div class="sm:pt-1">
                        <button id="save-default-price-btn" class="btn btn-primary w-full">Save Default</button>
                    </div>
                </div>
            </section>
            
            <!-- Financial Summary -->
            <section id="financial-summary" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <div class="card">
                    <h3 class="text-sm font-medium text-gray-500">Total Turnover (Revenue)</h3>
                    <p id="total-turnover" class="text-3xl font-bold text-gray-900 mt-1">₦0.00</p>
                </div>
                <div class="card">
                    <h3 class="text-sm font-medium text-gray-500">Total Costs (COGS + Expenses)</h3>
                    <p id="total-costs" class="text-3xl font-bold text-gray-900 mt-1">₦0.00</p>
                </div>
                <div class="card">
                    <h3 class="text-sm font-medium text-gray-500">Net Profit / Loss</h3>
                    <p id="net-profit" class="text-3xl font-bold text-green-600 mt-1">₦0.00</p>
                </div>
            </section>

            <!-- Forms and Chart Section -->
            <section class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
                <!-- Forms Column -->
                <div class="lg:col-span-1 space-y-8">
                    <!-- Add Sale Form -->
                    <div class="card">
                        <h2 class="text-xl font-semibold mb-4 text-gray-800 border-b pb-2">Record a New Sale</h2>
                        <form id="add-sale-form" class="space-y-4">
                             <div>
                                <label for="gold-type" class="block text-sm font-medium text-gray-700">Type of Gold</label>
                                <select id="gold-type" required>
                                    <option value="18K">18K Gold</option>
                                    <option value="22K">22K Gold</option>
                                    <option value="24K">24K Gold</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div>
                                <label for="sale-grams" class="block text-sm font-medium text-gray-700">Gold Weight (grams)</label>
                                <input type="number" id="sale-grams" step="0.01" required>
                            </div>
                            <div>
                                <label for="sale-price-per-gram" class="block text-sm font-medium text-gray-700">Sale Price per Gram (₦)</label>
                                <input type="number" id="sale-price-per-gram" step="0.01" required>
                            </div>
                             <div>
                                <label for="cost-per-gram" class="block text-sm font-medium text-gray-700">Cost of Gold per Gram (₦)</label>
                                <input type="number" id="cost-per-gram" step="0.01" required>
                            </div>
                            <div>
                                <label for="sale-customer" class="block text-sm font-medium text-gray-700">Customer Name (Optional)</label>
                                <input type="text" id="sale-customer">
                            </div>
                            <div class="pt-2">
                                <p class="text-lg font-semibold text-gray-800">Total Sale: <span id="sale-total-display">₦0.00</span></p>
                            </div>
                            <button type="submit" class="btn btn-primary w-full">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M12 5v14m-7-7h14"/></svg>
                                Add Sale
                            </button>
                        </form>
                    </div>
                    <!-- Add Expense Form -->
                    <div class="card">
                        <h2 class="text-xl font-semibold mb-4 text-gray-800 border-b pb-2">Record an Expense</h2>
                        <form id="add-expense-form" class="space-y-4">
                            <div>
                                <label for="expense-description" class="block text-sm font-medium text-gray-700">Description</label>
                                <input type="text" id="expense-description" required placeholder="e.g., Rent, Utilities">
                            </div>
                            <div>
                                <label for="expense-amount" class="block text-sm font-medium text-gray-700">Amount (₦)</label>
                                <input type="number" id="expense-amount" step="0.01" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-full">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M12 5v14m-7-7h14"/></svg>
                                Add Expense
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Chart Column -->
                <div class="lg:col-span-2 card">
                    <h2 class="text-xl font-semibold mb-4 text-gray-800">Sales Performance</h2>
                    <canvas id="sales-chart"></canvas>
                </div>
            </section>

            <!-- Data Tables -->
            <section class="card">
                <!-- Tab Navigation -->
                <div class="border-b border-gray-200">
                    <nav class="-mb-px flex space-x-8" aria-label="Tabs">
                        <button id="sales-tab" class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm tab-active">
                            Sales History
                        </button>
                        <button id="expenses-tab" class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm text-gray-500 border-transparent hover:text-gray-700 hover:border-gray-300">
                            Expense History
                        </button>
                    </nav>
                </div>

                <!-- Sales Content -->
                <div id="sales-content" class="mt-6">
                    <div class="flex justify-end mb-4">
                         <div class="w-full sm:w-auto">
                            <label for="sort-gold-type" class="block text-sm font-medium text-gray-700">Sort by Gold Type</label>
                            <select id="sort-gold-type" class="mt-1">
                                <option value="All">All Types</option>
                                <option value="18K">18K Gold</option>
                                <option value="22K">22K Gold</option>
                                <option value="24K">24K Gold</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                    </div>
                    <div class="overflow-x-auto max-h-96">
                        <table class="w-full text-sm text-left text-gray-500">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50 sticky top-0">
                                <tr>
                                    <th scope="col" class="py-3 px-6">Date</th>
                                    <th scope="col" class="py-3 px-6">Type</th>
                                    <th scope="col" class="py-3 px-6">Grams</th>
                                    <th scope="col" class="py-3 px-6">Total Sale</th>
                                    <th scope="col" class="py-3 px-6">Profit</th>
                                    <th scope="col" class="py-3 px-6">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="sales-history-body">
                                <!-- Sales will be injected here -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Expenses Content -->
                <div id="expenses-content" class="hidden mt-6">
                    <div class="overflow-x-auto max-h-96">
                        <table class="w-full text-sm text-left text-gray-500">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50 sticky top-0">
                                <tr>
                                    <th scope="col" class="py-3 px-6">Date</th>
                                    <th scope="col" class="py-3 px-6">Description</th>
                                    <th scope="col" class="py-3 px-6">Amount</th>
                                    <th scope="col" class="py-3 px-6">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="expenses-history-body">
                                <!-- Expenses will be injected here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </main>
        
        <!-- Toast Notification -->
        <div id="toast" class="fixed bottom-5 right-5 bg-gray-800 text-white py-2 px-4 rounded-lg shadow-lg opacity-0 transition-opacity duration-300">
            <p id="toast-message"></p>
        </div>
    </div>

    <!-- Firebase -->
    <script type="module">
        // --- Firebase SDK Imports ---
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, doc, addDoc, onSnapshot, deleteDoc, setLogLevel, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Firebase Configuration ---
        // These global variables are provided by the environment.
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-gold-pos-app';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "YOUR_API_KEY", authDomain: "...", projectId: "..." };
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        
        // --- App State ---
        let db, auth;
        let sales = [];
        let expenses = [];
        let defaultPrices = {};
        let salesChart;

        // --- UI Elements ---
        const loadingIndicator = document.getElementById('loading-indicator');
        const mainContent = document.getElementById('main-content');
        const addSaleForm = document.getElementById('add-sale-form');
        const addExpenseForm = document.getElementById('add-expense-form');
        const totalTurnoverEl = document.getElementById('total-turnover');
        const totalCostsEl = document.getElementById('total-costs');
        const netProfitEl = document.getElementById('net-profit');
        const salesHistoryBody = document.getElementById('sales-history-body');
        const expensesHistoryBody = document.getElementById('expenses-history-body');
        const saleTotalDisplay = document.getElementById('sale-total-display');
        const toastEl = document.getElementById('toast');
        const toastMessageEl = document.getElementById('toast-message');
        const salesTab = document.getElementById('sales-tab');
        const expensesTab = document.getElementById('expenses-tab');
        const salesContent = document.getElementById('sales-content');
        const expensesContent = document.getElementById('expenses-content');
        const sortGoldType = document.getElementById('sort-gold-type');
        const defaultGoldType = document.getElementById('default-gold-type');
        const defaultPricePerGram = document.getElementById('default-price-per-gram');
        const saveDefaultPriceBtn = document.getElementById('save-default-price-btn');
        const saleGoldTypeInput = document.getElementById('gold-type');

        // --- Utility Functions ---
        const formatCurrency = (amount) => `₦${(amount || 0).toFixed(2)}`;
        
        const showToast = (message) => {
            toastMessageEl.textContent = message;
            toastEl.classList.remove('opacity-0');
            setTimeout(() => {
                toastEl.classList.add('opacity-0');
            }, 3000);
        };
        
        // --- Main App Logic ---
        
        /**
         * Initializes Firebase and sets up auth state listener.
         */
        async function initializeFirebase() {
            try {
                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                setLogLevel('debug'); // For more detailed console logs

                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        console.log("User is signed in:", user.uid);
                        setupListeners(user.uid);
                        mainContent.classList.remove('hidden');
                        loadingIndicator.classList.add('hidden');
                    } else {
                        console.log("No user signed in, trying to sign in.");
                        try {
                            if (initialAuthToken) {
                                await signInWithCustomToken(auth, initialAuthToken);
                            } else {
                                await signInAnonymously(auth);
                            }
                        } catch (error) {
                            console.error("Anonymous sign-in failed:", error);
                            loadingIndicator.innerHTML = '<p class="text-red-500">Error: Could not connect to the database. Please refresh.</p>';
                        }
                    }
                });
            } catch (error) {
                console.error("Firebase initialization failed:", error);
                 loadingIndicator.innerHTML = '<p class="text-red-500">Error: Firebase configuration is invalid.</p>';
            }
        }

        /**
         * Sets up real-time listeners for sales and expenses collections.
         * @param {string} userId The current user's ID.
         */
        function setupListeners(userId) {
            const salesCollectionPath = `artifacts/${appId}/users/${userId}/sales`;
            const expensesCollectionPath = `artifacts/${appId}/users/${userId}/expenses`;
            const settingsDocPath = `artifacts/${appId}/users/${userId}/settings/defaults`;

            // Sales listener
            onSnapshot(collection(db, salesCollectionPath), (snapshot) => {
                sales = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                sales.sort((a, b) => b.timestamp - a.timestamp); // Sort by most recent first
                render();
            });

            // Expenses listener
            onSnapshot(collection(db, expensesCollectionPath), (snapshot) => {
                expenses = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                expenses.sort((a, b) => b.timestamp - a.timestamp); // Sort by most recent first
                render();
            });

            // Settings listener for default prices
            onSnapshot(doc(db, settingsDocPath), (snapshot) => {
                if (snapshot.exists()) {
                    defaultPrices = snapshot.data();
                    console.log("Loaded default prices:", defaultPrices);
                } else {
                    console.log("No default prices document found.");
                    defaultPrices = {};
                }
                populateDefaultPriceForm(); // Update UI with loaded prices
                prefillSalePrice(); // Attempt to prefill sale form
            });
        }

        /**
         * Renders all dynamic parts of the UI.
         */
        function render() {
            renderSummary();
            renderSalesHistory();
            renderExpensesHistory();
            renderChart();
        }

        /**
         * Calculates and displays the financial summary.
         */
        function renderSummary() {
            const turnover = sales.reduce((sum, sale) => sum + sale.totalSale, 0);
            const costOfGoodsSold = sales.reduce((sum, sale) => sum + sale.totalCost, 0);
            const totalExpenses = expenses.reduce((sum, expense) => sum + expense.amount, 0);
            const totalCosts = costOfGoodsSold + totalExpenses;
            const profit = turnover - totalCosts;

            totalTurnoverEl.textContent = formatCurrency(turnover);
            totalCostsEl.textContent = formatCurrency(totalCosts);
            netProfitEl.textContent = formatCurrency(profit);

            if (profit < 0) {
                netProfitEl.classList.remove('text-green-600');
                netProfitEl.classList.add('text-red-600');
            } else {
                netProfitEl.classList.remove('text-red-600');
                netProfitEl.classList.add('text-green-600');
            }
        }

        /**
         * Renders the sales history table, applying any active filters.
         */
        function renderSalesHistory() {
            const filterValue = sortGoldType.value;
            const filteredSales = sales.filter(sale => filterValue === 'All' || sale.goldType === filterValue);

            salesHistoryBody.innerHTML = '';
            if (filteredSales.length === 0) {
                salesHistoryBody.innerHTML = '<tr><td colspan="6" class="text-center py-4 text-gray-500">No matching sales recorded.</td></tr>';
                return;
            }
            filteredSales.forEach(sale => {
                const tr = document.createElement('tr');
                tr.className = 'bg-white border-b';
                tr.innerHTML = `
                    <td class="py-4 px-6">${new Date(sale.timestamp).toLocaleDateString()}</td>
                    <td class="py-4 px-6">${sale.goldType}</td>
                    <td class="py-4 px-6">${sale.grams.toFixed(2)}g</td>
                    <td class="py-4 px-6 font-medium text-gray-900">${formatCurrency(sale.totalSale)}</td>
                    <td class="py-4 px-6 font-medium text-green-600">${formatCurrency(sale.profit)}</td>
                    <td class="py-4 px-6">
                        <button class="text-red-500 hover:text-red-700 delete-sale-btn" data-id="${sale.id}">Delete</button>
                    </td>
                `;
                salesHistoryBody.appendChild(tr);
            });
        }
        
        /**
         * Renders the expenses history table.
         */
        function renderExpensesHistory() {
            expensesHistoryBody.innerHTML = '';
            if (expenses.length === 0) {
                expensesHistoryBody.innerHTML = '<tr><td colspan="4" class="text-center py-4 text-gray-500">No expenses recorded yet.</td></tr>';
                return;
            }
            expenses.forEach(expense => {
                const tr = document.createElement('tr');
                tr.className = 'bg-white border-b';
                tr.innerHTML = `
                    <td class="py-4 px-6">${new Date(expense.timestamp).toLocaleDateString()}</td>
                    <td class="py-4 px-6">${expense.description}</td>
                    <td class="py-4 px-6 font-medium text-gray-900">${formatCurrency(expense.amount)}</td>
                    <td class="py-4 px-6">
                        <button class="text-red-500 hover:text-red-700 delete-expense-btn" data-id="${expense.id}">Delete</button>
                    </td>
                `;
                expensesHistoryBody.appendChild(tr);
            });
        }
        
        /**
         * Renders the sales chart.
         */
        function renderChart() {
            const ctx = document.getElementById('sales-chart').getContext('2d');
            
            // Group sales by day
            const salesByDay = sales.reduce((acc, sale) => {
                const date = new Date(sale.timestamp).toLocaleDateString();
                if (!acc[date]) {
                    acc[date] = 0;
                }
                acc[date] += sale.totalSale;
                return acc;
            }, {});

            const sortedDates = Object.keys(salesByDay).sort((a,b) => new Date(a) - new Date(b));
            const chartLabels = sortedDates;
            const chartData = sortedDates.map(date => salesByDay[date]);
            
            if (salesChart) {
                salesChart.destroy();
            }

            salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: chartLabels,
                    datasets: [{
                        label: 'Daily Sales',
                        data: chartData,
                        borderColor: '#ca8a04',
                        backgroundColor: 'rgba(202, 138, 4, 0.1)',
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        /**
         * Populates the default price input based on the selected gold type.
         */
        function populateDefaultPriceForm() {
            const selectedType = defaultGoldType.value;
            const price = defaultPrices[selectedType] || '';
            defaultPricePerGram.value = price;
        }

        /**
         * Prefills the sale price input based on the selected gold type in the sale form.
         */
        function prefillSalePrice() {
            const selectedType = saleGoldTypeInput.value;
            const price = defaultPrices[selectedType] || '';
            document.getElementById('sale-price-per-gram').value = price;
            // Trigger input event to update total display
            addSaleForm.dispatchEvent(new Event('input'));
        }

        // --- Event Handlers ---

        /**
         * Handles the new sale form submission.
         */
        addSaleForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const goldType = document.getElementById('gold-type').value;
            const grams = parseFloat(document.getElementById('sale-grams').value);
            const pricePerGram = parseFloat(document.getElementById('sale-price-per-gram').value);
            const costPerGram = parseFloat(document.getElementById('cost-per-gram').value);
            const customer = document.getElementById('sale-customer').value;

            if (isNaN(grams) || isNaN(pricePerGram) || isNaN(costPerGram) || grams <= 0 || pricePerGram <= 0 || costPerGram < 0) {
                showToast("Please enter valid numbers for sale details.");
                return;
            }
            
            const totalSale = grams * pricePerGram;
            const totalCost = grams * costPerGram;
            const profit = totalSale - totalCost;

            const newSale = {
                goldType,
                grams,
                pricePerGram,
                costPerGram,
                customer,
                totalSale,
                totalCost,
                profit,
                timestamp: Date.now()
            };

            try {
                const userId = auth.currentUser.uid;
                const salesCollectionPath = `artifacts/${appId}/users/${userId}/sales`;
                await addDoc(collection(db, salesCollectionPath), newSale);
                showToast("Sale added successfully!");
                addSaleForm.reset();
                saleTotalDisplay.textContent = formatCurrency(0);
            } catch (error) {
                console.error("Error adding sale: ", error);
                showToast("Failed to add sale.");
            }
        });
        
        /**
         * Handles the new expense form submission.
         */
        addExpenseForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const description = document.getElementById('expense-description').value;
            const amount = parseFloat(document.getElementById('expense-amount').value);
            
            if (!description || isNaN(amount) || amount <= 0) {
                showToast("Please enter a valid description and amount.");
                return;
            }
            
            const newExpense = {
                description,
                amount,
                timestamp: Date.now()
            };

            try {
                const userId = auth.currentUser.uid;
                const expensesCollectionPath = `artifacts/${appId}/users/${userId}/expenses`;
                await addDoc(collection(db, expensesCollectionPath), newExpense);
                showToast("Expense added successfully!");
                addExpenseForm.reset();
            } catch (error) {
                console.error("Error adding expense: ", error);
                showToast("Failed to add expense.");
            }
        });

        /**
         * Handles saving the default price.
         */
        saveDefaultPriceBtn.addEventListener('click', async () => {
            const type = defaultGoldType.value;
            const price = parseFloat(defaultPricePerGram.value);

            if (isNaN(price) || price < 0) {
                showToast("Please enter a valid price.");
                return;
            }

            try {
                const userId = auth.currentUser.uid;
                const settingsDocPath = `artifacts/${appId}/users/${userId}/settings/defaults`;
                await setDoc(doc(db, settingsDocPath), { [type]: price }, { merge: true });
                showToast(`Default price for ${type} saved.`);
            } catch (error) {
                console.error("Error saving default price:", error);
                showToast("Failed to save default price.");
            }
        });

        /**
         * Handles clicks on delete buttons in tables.
         */
        document.body.addEventListener('click', async (e) => {
            const userId = auth.currentUser.uid;
            if (e.target.classList.contains('delete-sale-btn')) {
                const id = e.target.dataset.id;
                if (confirm('Are you sure you want to delete this sale?')) {
                    try {
                        const docPath = `artifacts/${appId}/users/${userId}/sales/${id}`;
                        await deleteDoc(doc(db, docPath));
                        showToast("Sale deleted.");
                    } catch (error) {
                        console.error("Error deleting sale: ", error);
                        showToast("Failed to delete sale.");
                    }
                }
            }
            if (e.target.classList.contains('delete-expense-btn')) {
                const id = e.target.dataset.id;
                if (confirm('Are you sure you want to delete this expense?')) {
                     try {
                        const docPath = `artifacts/${appId}/users/${userId}/expenses/${id}`;
                        await deleteDoc(doc(db, docPath));
                        showToast("Expense deleted.");
                    } catch (error) {
                        console.error("Error deleting expense: ", error);
                        showToast("Failed to delete expense.");
                    }
                }
            }
        });
        
        /**
         * Updates the total sale display as the user types.
         */
        addSaleForm.addEventListener('input', () => {
             const grams = parseFloat(document.getElementById('sale-grams').value) || 0;
             const pricePerGram = parseFloat(document.getElementById('sale-price-per-gram').value) || 0;
             saleTotalDisplay.textContent = formatCurrency(grams * pricePerGram);
        });

        /**
         * Handles tab switching for sales and expenses.
         */
        salesTab.addEventListener('click', () => {
            salesContent.classList.remove('hidden');
            expensesContent.classList.add('hidden');
            salesTab.classList.add('tab-active');
            expensesTab.classList.remove('tab-active');
        });

        expensesTab.addEventListener('click', () => {
            expensesContent.classList.remove('hidden');
            salesContent.classList.add('hidden');
            expensesTab.classList.add('tab-active');
            salesTab.classList.remove('tab-active');
        });

        /**
         * Re-renders the sales history table when the sort dropdown changes.
         */
        sortGoldType.addEventListener('change', renderSalesHistory);

        /**
         * Updates the default price form when the type selection changes.
         */
        defaultGoldType.addEventListener('change', populateDefaultPriceForm);

        /**
         * Updates the sale form when the gold type changes.
         */
        saleGoldTypeInput.addEventListener('change', prefillSalePrice);

        // --- Start the application ---
        initializeFirebase();

    </script>

</body>
</html>


